THIS FOLDER IS FOR THE FOLLOWING MEMEBERS
- JOSEPH
- COLIN
- GABRIEL
- DON

SOFTWARE ARCHITECTS
Primary Responsibilities:

System Architecture (P)
    - Overall system design
    - Technology stack selection
    - Integration patterns
    - Scalability planning
Database Design (P)
    - Schema design
    - Data relationships
    - Performance optimization
Risk Analysis (P)
    - Technical risk assessment
    - Architecture-related risks
    - Supporting:
- Implementation Phases (S)
- Non-Functional Requirements (S)


Supporting:
IMPLEMENTATION PHASES
Phase 1:
    - Basic user registration
    - Restaurant listing
    - Menu display
    - Simple order placement

Phase 2:
    - Payment integration
    - Order tracking
    - Review system
    - Restaurant dashboard

Phase 3:
    - Advanced features
    - Analytics
    - Optimization
    - Scale-up


Non-Functional Requirements:
    - Performance: Response time < 3 seconds
    - Security: Encrypted data transmission
    - Reliability: 99.9% uptime
    - Usability: Intuitive interface
    - Scalability: Handle multiple concurrent users
    - Privacy: User data protection



------------------------------------------------------
IN-DEBTH RESEARCH FOR SPECIFIC TOOLS & APIs:

1.1. Design streamlined system architecture
Create a high-level system architecture diagramâœ… //See Documentation < System Architecture Diagrams
Define key components: API Gateway, Auth Service, Order Service, Restaurant Service
Decide on communication patterns between services (RESTful, messaging)
Choose appropriate data storage solutions (e.g., PostgreSQL for relational data, MongoDB for flexible schemas)

1.2. Define core microservices and APIs
Outline service boundaries and responsibilities
Design RESTful API endpoints for each service
Define data models and DTOs for API requests/responses
Create OpenAPI (Swagger) specifications for each service

1.3. Plan essential integrations
Research and select a payment gateway provider (e.g., Stripe, PayPal)
Choose a maps API provider (e.g., Google Maps, Mapbox)
Define integration points and data flow for external services

Week 2-3 (12-10-24 to 25-10-24):

2.1. Guide developers in microservices implementation
Conduct architecture overview session with the development team
Provide code templates and best practices for service implementation
Assist in setting up inter-service communication
Review and approve service designs and implementations

2.2. Oversee API development and integration
Ensure consistent API design across services
Guide implementation of API versioning strategy
Assist in implementing API security (authentication, authorization)
Review API implementations for adherence to RESTful principles

2.3. Design simplified real-time communication for order tracking
Choose appropriate technology for real-time updates (e.g., WebSockets, Server-Sent Events)
Design event-driven architecture for order status updates
Create a scalable pub/sub system for real-time notifications

Week 4 (26-10-24 to 30-10-24):
3.1. Review implemented architecture
Conduct architecture review sessions with the development team
Verify that implemented services align with the designed architecture
Identify any deviations and assess their impact

3.2. Address critical architectural issues
Prioritize and resolve any architectural bottlenecks
Propose and implement quick architectural improvements
Ensure the system can handle expected load

3.3. Prepare basic architectural documentation
Create a comprehensive system architecture diagram
Document key architectural decisions and their rationales
Prepare a technical debt log for future improvements
Draft an architecture roadmap for post-MVP phases